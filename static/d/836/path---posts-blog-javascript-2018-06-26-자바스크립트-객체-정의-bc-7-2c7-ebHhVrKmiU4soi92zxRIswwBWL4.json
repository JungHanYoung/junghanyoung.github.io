{"data":{"markdownRemark":{"frontmatter":{"title":"자바스크립트에서 객체를 만드는 법 1"},"html":"<h2>개요</h2>\n<p>클래스나 상속과 같은 객체지향이 없는 자바스크립트는 함수, 즉 function으로만 코딩할 수 있다고 알고있다.</p>\n<p>자바스크립트로 객체를 정의하는 방법.</p>\n<h2>코드</h2>\n<h3>Java 코드</h3>\n<pre><code>// 자바 코드\nclass Obj1 {\n    public int id;\n    public String name;\n    public Obj1(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n    public void print() {\n        System.out.println(\"id: \" + this.id + \", name: \" + this.name)\n    }\n}\n</code></pre>\n<br/>\n<h3>Javascript 1</h3>\n<pre><code>// 자바스크립트 코드\nvar Obj1 = function(id, name) {\n    this.id = id;\n    this.name = name;\n    // 내부 메소드 정의\n    this.print = function() {\n        console.log('id: ' + this.id + ', name: ' + this.name);\n    }\n}\n</code></pre>\n<ul>\n<li>function와 this를 이용.</li>\n<li>변수는 변수로 정의, 메소드는 함수로 정의</li>\n<li>내부 메소드 정의 </li>\n</ul>\n<p>메소드를 내부에 정의할 경우 새로운 객체를 생성할때마다 print함수가 매번 재생성 된다고 한다. 함수를 바꾸는 경우가 있다면 필요하겠지만 그럴 일은 거의 없으므로...</p>\n<h3>Javascript 2</h3>\n<pre><code>// 프로토타입 이용한 메소드 정의\nvar Obj1 = function(id, name) {\n    this.id = id;\n    this.name = name;\n}\n\nObj1.prototype.print = function() {\n    console.log('id: ' + this.id + ', name: ' + this.name);\n}\n</code></pre>\n<ul>\n<li>프로토타입에 정의할 경우 매번 재생성하지 않고 함수는 프로토타입을 통해서만 호출되는 것 같다.</li>\n</ul>\n<pre><code>// 객체 생성\nvar o1 = new Obj1(1, 'hello');\n// 내부 메소드 정의\nObj1 { id: 1, name: 'hello', print: [Function] }\n// 프로토타입 메소드 정의\nObj1 { id: 1, name: 'hello' }\n</code></pre>\n<p>자바스크립트의 객체는 그저 함수로 객체를 흉내내는 것이라 볼 수 있다.</p>\n<h2>ES2015 class 정의</h2>\n<p>ES2015(ES6)부터 나온 클래스 정의 문법</p>\n<pre><code>// javascript ES6\nclass Obj {\n    constructor(id, name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    print() {\n        console.log(('id: ' + this.id + ', name: ' + this.name);\n    }\n}\n</code></pre>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/javascript/2018-06-26-자바스크립트-객체-정의/","previous":{"node":{"id":"f3b5ba94-e765-525a-baf9-dd02e2ce55aa","frontmatter":{"title":"null과 undefined의 차이점","category":"javascript","date":"2018-06-16"},"fields":{"slug":"/posts/blog/javascript/2018-06-16-Javascript의-null-vs-undefined/"}}},"next":{"node":{"id":"cff46be5-bb4c-57c0-b005-9d96b68ec3ee","frontmatter":{"title":"Javascript에서의 Prototype은 무엇인가?","category":"javascript","date":"2018-06-26"},"fields":{"slug":"/posts/blog/javascript/2018-07-01-Javascript-Prototype/"}}}}}