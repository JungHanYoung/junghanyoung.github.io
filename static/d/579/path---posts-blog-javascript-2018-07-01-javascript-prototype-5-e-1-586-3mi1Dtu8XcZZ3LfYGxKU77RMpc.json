{"data":{"markdownRemark":{"frontmatter":{"title":"Javascript에서의 Prototype은 무엇인가?"},"html":"<p>prototype은 자바스크립트를 객체지향으로 개발할 수 있게 하는 개념이다.</p>\n<h2>Prototype과 Class</h2>\n<p>객체지향 언어로 Java가 대표적이라 할 수 있는데 class를 정의하고 이를 활용하여 객체지향개발을 할 수 있다. 간단한 객체지향적 코드를 다음과 같이 구현.</p>\n<pre><code>// Java 코드\nclass Obj1 {\n    public int id;\n    public String username;\n}\n// 상속\nclass Obj2 extends Obj1 {\n    public String phone;\n}\n</code></pre>\n<p>자바스크립트는 기본적으로 함수 기반의 언어라서 class라는 개념이없다. 그렇다면 객체지향 개발은 어떻게 하는 것일까? 자바스크립트는 class라는 개념 대신에 프로토타입이란 개념이 있다.</p>\n<p>자바스크립트의 모든 객체에는 자신을 생성한 객체의 원형이 있다. 그 객체의 원형(prototype)을 프로토타입이라 부른다.</p>\n<p>일단 자바스크립트 객체를 정의하는 기본적인 코드부터 살펴본다.</p>\n<pre><code>var Person = function(name, age) {\n    this.name = name;\n    this.age = age;\n}\nvar minsu = new Person('민수', 18);\n</code></pre>\n<p>해당코드를 통해 Person이라는 함수를 통해 minsu 객체를 만들 수 있다. 이제 이 객체에 메소드를 추가하려면 두가지의 방법이 있다.</p>\n<pre><code>// 1. 내부 메소드 정의\nvar Person = function(name, age) {\n    this.name = name;\n    this.age = age;\n    this.goRestroom = function() {\n        console.log(this.name + ' went to the restroom')\n    }\n}\n// 2. 프로토타입을 통한 메소드 정의\nvar Person = function(name, age) {\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype.goRestroom = function() {\n    console.log(this.name + ' went to the restroom');\n}\n</code></pre>\n<p>일반적으로 자바스크립트 객체에 대해 익숙치 않다면 1번과 같은 방법을 생각할 것 같다. 나 또한 그랬다. 여기서 1번은 여러개의 Person객체를 정의했을 때 각각의 객체가 goRestroom이라는 속성을 가지고 있어 메모리를 차지하게 되는 문제점이 있다. </p>\n<pre><code>console.log(minsu)      // 생성한 객체 정보 출력\n// 1. 내부 메소드\nPerson { name: '민수', age: 18, goRestroom: [Function] }\n// 2. 프로토타입을 통한 메소드 정의\nPerson { name: '민수', age: 18 }\n</code></pre>\n<p>각각의 객체에 메소드가 속성으로 필요한 경우도 있을 수 있지만 보통 메소드는 객체들이 하나 정의된 메소드를 공유하는 것이 바람직하다.</p>\n<p>이는 프로토타입을 이용하면 가능해지게 되는데... 이것은 자바스크립트만의 특성이라고 볼 수 있다.</p>\n<h3>Prototype Link와 Prototype Object</h3>\n<p>자바스크립트에서 함수를 정의할 때에는 2가지가 자동적으로 실행되는데 </p>\n<ol>\n<li>해당 함수에 생성자 자격부여</li>\n<li>해당 함수에 Prototype Object 생성</li>\n<li>이렇게 생성된 Prototype Object에 constructor와 <strong>proto</strong>를 연결</li>\n<li>여기서 <strong>proto</strong>는 Prototype Link를 말한다.</li>\n</ol>\n<p>예를 들어 Person이 정의될 때 위의 2가지가 수행되고 해당 함수로 객체 생성 시 <strong>proto</strong>가 Person의 Prototype Object에 연결되어진다.</p>\n<p>여기서 Person.prototype에 속성을 넣으면 Prototype Object에 적용되고 이 후에 Person으로 객체 생성시 <strong>proto</strong>에서 방금 적용한 Prototype Object를 볼 수 있다.</p>\n<p>자바스크립트의 모든 객체는 prototype으로 숨겨진 연결을 모두 찾아낸다. 만약 minsu객체에 goRestroom 속성이 없으면 <strong>proto</strong>에 연결된 Prototype Object를 탐색하고 또 없으면 그 안에 있는 <strong>proto</strong>에 연결된 Prototype Object를 탐색, 없으면 <strong>proto</strong>탐색 ... 이 과정을 반복하게 된다.</p>\n<p>여기서 프로토타입 속성에 메소드로 필요한 함수를 정의하면 Person함수로 만들어진 객체는 <strong>proto</strong>를 통해 객체의 원형에 접근해 메소드를 공유할 수 있게 된다.</p>\n<h2>프로토타입과 상속</h2>\n<p>위와 같이 <strong>proto</strong>를 연속으로 만들 수 있다. 가령 이렇게</p>\n<pre><code>var Person = function(name, age) {\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype.goRestroom = function() {\n    console.log(this.name + ' went to the restroom');\n}\nvar Adult = function(name, age, phone) {\n    Person.call(this, name, age);\n    this.phone = phone;\n}\nAdult.prototype = new Person();\n\nvar minsu = new Adult('민수', 20, '010-0000-0000');\n\nminsu.goRestroom();\n\n// output: 민수 went to the restroom\n</code></pre>\n<p>minsu객체가 goRestroom을 탐색하는 과정을 따라가면 </p>\n<blockquote>\n<p>Adult { name: \"민수\", age: 20, phone: \"010-0000-0000\"}</p>\n<blockquote>\n<p>age: 20</p>\n<p>name: \"민수\"</p>\n<p>phone: \"010-0000-0000\"</p>\n<p><strong>proto\\</strong>: Person</p>\n<blockquote>\n<p>age: undefined</p>\n<p>name: undefined</p>\n<p><strong>proto\\</strong>:</p>\n<blockquote>\n<p>goRestroom: function() ...</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<ol>\n<li>minsu객체내에 있는지 탐색.</li>\n<li>minsu에 연결된 prototype(new Person())에서 탐색</li>\n<li>new Person()에 연결된 prototype 탐색</li>\n</ol>\n<p>이렇게 <strong>proto\\</strong>, 즉 Prototype Link는 객체와 객체를 연결하는 체인의 역할을 하게 된다. 이러한 관계를 prototype chain이라고 한다. 이를 통해 여러 상속을 구현할 수가 있다.</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/javascript/2018-07-01-Javascript-Prototype/","previous":{"node":{"id":"f3b5ba94-e765-525a-baf9-dd02e2ce55aa","frontmatter":{"title":"","category":null,"date":"2018-06-16 07:49:00 +0300"},"fields":{"slug":"/posts/blog/javascript/2018-06-16-Javascript의-null-vs-undefined/"}}},"next":{"node":{"id":"b74a7315-b615-501d-94c8-da8f4c58495e","frontmatter":{"title":"","category":null,"date":"2018-06-26 07:49:00 +0300"},"fields":{"slug":"/posts/blog/javascript/2018-06-29-Block-Chain-간단-구현/"}}}}}