{"data":{"markdownRemark":{"frontmatter":{"title":"React 시작해보기. (1)"},"html":"<h1>React.js</h1>\n<p>UI를 구축하기 위한 자바스크립트 라이브러리</p>\n<h2>간단한 할 일 목록 앱</h2>\n<p>velopert님의 리액트 강좌를 참고!</p>\n<p>React 코드를 직접 써보기로 한다.</p>\n<p>프로젝트는 CodeSandbox를 이용</p>\n<p>create Sandbox -> New Project에서 React선택</p>\n<h3>기본 로직</h3>\n<ul>\n<li>할일 목록</li>\n<li>할일 추가</li>\n<li>할일 삭제</li>\n<li>할일 검색</li>\n</ul>\n<h3>데이터 구성</h3>\n<p>할일(Todo)</p>\n<ul>\n<li>내용(content)</li>\n<li>작성자(writer)</li>\n</ul>\n<h3>디렉토리</h3>\n<pre><code>- public\n- src\n-- index.js\n-- components\n--- App.js\n--- Todo.js\n--- TodoCreate.js    // \n--- TodoDetail.js\n</code></pre>\n<h3>일단 이번 포스팅에선..</h3>\n<ol>\n<li>할일 목록 출력</li>\n<li>할일 추가</li>\n</ol>\n<h2>시작</h2>\n<p>CodeSandbox로 시작하기 때문에 babel, react 컴파일러가 기본적으로 세팅되어 있으므로 그거에 대한 내용은 다루지 않고, react코드만 다루는 걸로!</p>\n<h3>엔트리 파일 (index.js)</h3>\n<pre><code>// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nimport \"./styles.css\";  // 아직 스타일은 적용 X\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(&#x3C;App />, rootElement);\n</code></pre>\n<p>맨 처음은 react-dom라이브러리로 컴포넌트와 이것이 들어갈 루트경로를 지정한다. 모듈단위로 컴포넌트를 import시키므로 코드를 간단하게 볼 수 있다.</p>\n<p>App컴포넌트를 따라가면..</p>\n<pre><code>// src/components/App.js\nimport React from \"react\";\n\n// Components\nimport Todo from \"./Todo\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;Todo />\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>Todo 컴포넌트만 들어있다.</p>\n<pre><code>// src/components/Todo.js\nimport React from \"react\";\n\n// Components\nimport TodoCreate from \"./TodoCreate\";\n\nclass Todo extends React.Component {\n  state = {\n    todoList: [\n      {\n        content: \"breakfast\",\n        writer: \"hanyoung\"\n      },\n      {\n        content: \"lunch\",\n        writer: \"hanyoung\"\n      },\n      {\n        content: \"dinner\",\n        writer: \"hanyoung\"\n      }\n    ]\n  };\n  createTodo = (content, writer) => {\n    const { todoList } = this.state;\n    this.setState({\n      todoList: todoList.concat({ content, writer })\n    });\n  };\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>TodoList&#x3C;/h1>\n        &#x3C;ul>\n          {this.state.todoList.map((todo, index) => {\n            return &#x3C;li key={`todo-${index}`}>{todo.content}&#x3C;/li>;\n          })}\n        &#x3C;/ul>\n        &#x3C;TodoCreate createTodo={this.createTodo} />\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default Todo;\n</code></pre>\n<p>해당 컴포넌트에는 할일 목록에 대한 데이터와 할일을 추가할 수 있는 메소드를 정의한다. 해당 데이터를 map함수를 통해 리스트렌더링을 수행. 할일 추가 메소드는 TodoCreate 컴포넌트에 props로 보냄. TodoCreate에서 폼UI 및 처리 수행.</p>\n<pre><code>// src/components/TodoCreate.js\nimport React from \"react\";\n\nclass TodoCreate extends React.Component {\n  state = {\n    content: \"\",\n    writer: \"\"\n  };\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n  handleCreate = () => {\n    const { content, writer } = this.state;\n    this.props.createTodo(content, writer);\n    this.setState({\n      content: \"\",\n      writer: \"\"\n    });\n  };\n  render() {\n    const { content, writer } = this.state;\n    return (\n      &#x3C;div>\n        &#x3C;input\n          type=\"text\"\n          value={content}\n          onChange={this.handleChange}\n          name=\"content\"\n        />\n        &#x3C;br />\n        &#x3C;input\n          type=\"text\"\n          value={writer}\n          onChange={this.handleChange}\n          name=\"writer\"\n        />\n        &#x3C;br />\n        &#x3C;button onClick={this.handleCreate}>CREATE&#x3C;/button>\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default TodoCreate;\n</code></pre>\n<h3>state, props</h3>\n<p>React에서 데이터를 다루기 위해 필요한 개념은 state, props이다.</p>\n<p>state는 각각 컴포넌트마다 만들 수 있다.</p>\n<pre><code>class TR1 extends React.Component {\n    state = {\n        todoList: [ ... ]\n    }\n    ...\n}\n</code></pre>\n<p>state는 컴포넌트 렌더링 시에 사용될 수 있다.</p>\n<p>props는 부모컴포넌트에서 받아올 수 있다.</p>\n<pre><code>class Parent extends React.Component {\n    render() {\n        return (\n            &#x3C;Child data={true}>\n        )\n    }\n}\nclass Child extends React.Component {\n    render() {\n        return (\n            &#x3C;h1>{this.props.data}&#x3C;/h1>\n        )\n    }\n}\n</code></pre>\n<p>컴포넌트에 속성으로써 props를 전달 가능.</p>\n<h3>setState</h3>\n<p>state를 수정하는 방법으로 state값을 직접 바꾸는 것이 아니라 setState함수로 state를 바꾸어야 한다.</p>\n<h3>Array.map((item, index) => { ... })</h3>\n<p>배열 형태의 데이터를 react코드로 렌더링할 때 필요하다. 콜백함수로써 리스트아이템, 인덱스를 파라미터로 받고 리턴값을  가지고 새로운 배열을 결과값으로 만든다.</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/react/2018-08-01-react-연습(1)/","previous":{"node":{"id":"cff46be5-bb4c-57c0-b005-9d96b68ec3ee","frontmatter":{"title":"Javascript에서의 Prototype은 무엇인가?","category":"javascript","date":"2018-07-01"},"fields":{"slug":"/posts/blog/javascript/2018-07-01-Javascript-Prototype/"}}},"next":{"node":{"id":"a8952e63-3233-542a-8193-2228722c62d6","frontmatter":{"title":"category test","category":null,"date":"2019-03-25"},"fields":{"slug":"/posts/blog/react/2019-03-25-category-test/"}}}}}