{"data":{"markdownRemark":{"frontmatter":{"title":"블록체인 개념 정립을 위한 자바스크립트 코딩"},"html":"<h2>Block Chain</h2>\n<p>관리 대상의 데이터 '블록'이라고 하는 데이터들을 P2P방식으로 생성된 체인 형식의 분산 데이터 저장 환경</p>\n<p>누구라도 데이터를 임의로 수정할 수 없고 누구나 변경 결과를 열람할 수 있는 분산 컴퓨팅 기술 기반의 데이터 위변조 방지 기술</p>\n<h2>간단한 블록체인 구현</h2>\n<ul>\n<li>Node.js를 기반으로 블록체인을 구현할 예정</li>\n<li>Javascript ES6</li>\n<li>SHA256 암호화 알고리즘 모듈 필요</li>\n</ul>\n<h2>블록의 구성</h2>\n<ul>\n<li>인덱스 : </li>\n<li>타임스탬프 :</li>\n<li>데이터 :</li>\n<li>이전 해쉬 :</li>\n<li>해쉬 :</li>\n<li>연산 횟수 :</li>\n</ul>\n<h2>블록 구현</h2>\n<h3>블록 속성</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 클래스 정의\nclass Block {\n    // 생성자\n    constructor(index, timestamp, data, previousHash) {\n        // 인덱스\n        this.index = index;\n        // 타임스탬프\n        this.timestamp = timestampm;\n        // 데이터\n\t\tthis.data = data;\n        // 이전 해쉬\n\t\tthis.previousHash = previousHash;\n        // 해쉬\n\t\tthis.hash = this.calculateHash();\n        // 연산 횟수\n\t\tthis.nonce = 0;\n    }\n}</code></pre></div>\n<ul>\n<li>calculateHash는 현재 들어온 index, timestamp, data, previousHash, hash, nonce를 SHA256 암호화 계산하여 그 값을 리턴한다.</li>\n</ul>\n<h3>calculateHash mineBlcok 메소드 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import SHA256 from &#39;crypto-js/sha256&#39;;\n\nclass Block {\n    // ...생성자\n    constructor(index, timestamp, data, previousHash) { ... }\n    // 해쉬 계산 메소드\n    calculateHash() {\n        return SHA256(this.index + this.previousHash + this.timestamp + this.data + this.nonce).toString();\n    }\n    // 블록 채굴 메소드\n    mineBlock(difficulty) {\n        // 0 ~ difficulty\n        while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&#39;0&#39;)) {\n            this.nonce++;\n            this.hash = this.calculateHash();\n        }\n\n        console.log(&#39;Block mined &#39; + this.hash);\n    }\n}</code></pre></div>\n<ul>\n<li>블록 채굴 메소드 mineBlock은 다음에 정의될 블록체인에서 난이도(difficulty)를 변수로 받는다.</li>\n<li>해쉬 문자열에서 난이도만큼의 문자를 비교</li>\n</ul>\n<blockquote>\n<h3>블록 채굴 원리</h3>\n<p>difficulty = 2인 경우</p>\n<ol>\n<li>\n<p>계산된 해쉬 <span style='color: red;'>c6</span>2b8e4162c75e1fe45dad6af8fcd2672a258941af50ee87f19eacfc190c2ce3</p>\n</li>\n<li>\n<p>nonce(연산횟수) 증가</p>\n</li>\n<li>\n<p>해쉬 문자열 앞 2개의 문자가 '00'인지 비교</p>\n</li>\n<li>\n<ol>\n<li>다를 경우 업데이트된 nonce(연산횟수)에 따라 해쉬 재적용</li>\n<li>같은 경우 채굴 완료</li>\n</ol>\n</li>\n<li>\n<p>같을 때까지 해당 로직을 반복</p>\n</li>\n</ol>\n</blockquote>\n<h2>블록체인 구현</h2>\n<h3>블록체인 구성</h3>\n<ul>\n<li>chain : 블록들의 배열</li>\n<li>difficulty : 블록체인의 난이도</li>\n</ul>\n<p>블록체인을 만들기 위해선 이전에 초기 블록을 추가시켜 주어야 하므로</p>\n<p>블록체인 생성시 chain속성에 의미없는 블록을 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BlockChain {\n    constructor() {\n        this.chain = [ this.createGenesisBlock() ];\n        this.difficulty = 2;    // 임의로 지정한 것\n    }\n    // \n    createGenesisBlock() {\n        return new Block(0, &#39;01/01/2018&#39;, &#39;GenesisBlock&#39;, &#39;0&#39;);\n    }\n}</code></pre></div>\n<h3>블록체인에 블록 추가 메소드</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BlockChain {\n    // ...생성자\n    ...\n    // 최근 추가된 블록 찾기\n    getLatestBlock() {\n\t\treturn this.chain[this.chain.length - 1];\n\t}\n    // 블록 추가 메소드\n    addBlock(newBlock) {\n\t\tnewBlock.previousHash = this.getLatestBlock().hash;\n\t\tnewBlock.mineBlock(this.difficulty);\n\t\tthis.chain.push(newBlock);\n\t}\n}</code></pre></div>\n<ul>\n<li>블록 추가시 이전 블록의 해쉬를 참조해야한다.</li>\n<li>추가되는 블록은 채굴 로직을 수행해야한다.</li>\n<li>채굴 완료시 블록체인에 블록을 추가한다.</li>\n</ul>\n<h3>블록체인 유효성 검사</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BlockChain {\n    ...\n    isChainValid() {\n        for (let i = 1; i &lt; this.chain.length; i++) {\n\t\t\tconst currentBlock = this.chain[i];\n\t\t\tconst previousBlock = this.chain[i - 1];\n\n\t\t\tif (currentBlock.hash !== currentBlock.calculateHash()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (currentBlock.previousHash !== previousBlock.hash) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n    }\n}</code></pre></div>\n<ul>\n<li>체인으로 걸려있는 해쉬들을 다시 비교하여 블록체인이 유효한지 검사한다.</li>\n</ul>\n<h2>구현된 블록체인 생성하고 블록 추가해보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let testChain = new BlockChain();\n\nconsole.time(&#39;Mining block 1&#39;);\nconsole.log(&#39;Mining block 1...&#39;);\ntestChain.addBlock(new Block(1, &#39;10/08/2017&#39;, { amount: 4 }));\nconsole.timeEnd(&#39;Mining block 1&#39;);\n\nconsole.time(&#39;Mining block 2&#39;);\nconsole.log(&#39;Mining block 2...&#39;);\ntestChain.addBlock(new Block(2, &#39;12/10/2017&#39;, { amount: 10 }));\nconsole.timeEnd(&#39;Mining block 2&#39;);\n\nconsole.log(JSON.stringify(testChain, null, 4));\n\nconsole.log(&#39;Is blockchain valid? &#39; + testChain.isChainValid());</code></pre></div>\n<h3>출력결과</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Mining block 1...\nBlock minded 008184e0a5f7a9bc36ef14d2bfdc51e41acc25588572a5417d118d3883bbc6bb\nMining block 1: 24.866ms\nMining block 2...\nBlock minded 0065bf0059bf0d3765b7c63a349fe31d2f68690642c83f2d4bbcb4140f132693\nMining block 2: 8.445ms\n{\n    &quot;chain&quot;: [\n        {\n            &quot;index&quot;: 0,\n            &quot;timestampm&quot;: &quot;01/01/2017&quot;,\n            &quot;data&quot;: &quot;Genesis block&quot;,\n            &quot;previousHash&quot;: &quot;0&quot;,\n            &quot;hash&quot;: &quot;c62b8e4162c75e1fe45dad6af8fcd2672a258941af50ee87f19eacfc190c2ce3&quot;,\n            &quot;nonce&quot;: 0\n        },\n        {\n            &quot;index&quot;: 1,\n            &quot;timestampm&quot;: &quot;10/08/2017&quot;,\n            &quot;data&quot;: {\n                &quot;amount&quot;: 4\n            },\n            &quot;previousHash&quot;: &quot;c62b8e4162c75e1fe45dad6af8fcd2672a258941af50ee87f19eacfc190c2ce3&quot;,\n            &quot;hash&quot;: &quot;008184e0a5f7a9bc36ef14d2bfdc51e41acc25588572a5417d118d3883bbc6bb&quot;,\n            &quot;nonce&quot;: 157\n        },\n        {\n            &quot;index&quot;: 2,\n            &quot;timestampm&quot;: &quot;12/10/2017&quot;,\n            &quot;data&quot;: {\n                &quot;amount&quot;: 10\n            },\n            &quot;previousHash&quot;: &quot;008184e0a5f7a9bc36ef14d2bfdc51e41acc25588572a5417d118d3883bbc6bb&quot;,\n            &quot;hash&quot;: &quot;0065bf0059bf0d3765b7c63a349fe31d2f68690642c83f2d4bbcb4140f132693&quot;,\n            &quot;nonce&quot;: 151\n        }\n    ],\n    &quot;difficulty&quot;: 2\n}\nIs blockchain valid? true</code></pre></div>\n<br/>\n<h2>난이도에 따른 채굴속도 체크</h2>\n<h3>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Block, BlockChain } from &#39;./index&#39;;\n\nlet blockChain2 = new BlockChain();\nlet blockChain5 = new BlockChain();\n\nblockChain2.difficulty = 2;\nblockChain5.difficulty = 5;\n\nconsole.time(&#39;blockchain2 mine&#39;);\nblockChain2.addBlock(new Block(1, &#39;01/01/2018&#39;, { amount: 5 }));\nconsole.timeEnd(&#39;blockchain2 mine&#39;);\n\nconsole.time(&#39;blockchain5 mine&#39;);\nblockChain5.addBlock(new Block(1, &#39;01/01/2018&#39;, { amount: 5 }));\nconsole.timeEnd(&#39;blockchain5 mine&#39;);</code></pre></div>\n<h3>출력</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Block minded 007dd67f313dcf9f864f81879f2640cf1bfb731760cf72b50059d7aa7ba3540f\nblockchain2 mine: 43.624ms\nBlock minded 0000084b77bcac70df92bc928d063d73d24191a7d1c76306f3dcd75c5cec49a0\nblockchain5 mine: 10741.946ms</code></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/javascript/2018-06-29-Block-Chain-간단-구현/","previous":{"node":{"id":"dcd7f1a5-872d-50df-8417-bd894d2601df","frontmatter":{"title":"JDBC -> DBCP -> MyBatis","category":"spring","date":"2018-06-17 07:49:00 +0300"},"fields":{"slug":"/posts/blog/spring/2018-06-18-JDBC,-DBCP,-그리고-MyBatis/"}}},"next":{"node":{"id":"39354791-87e9-5161-97d2-82e4b823a62a","frontmatter":{"title":"자바스크립트에서 객체를 만드는 법 1","category":"javascript","date":"2018-06-26"},"fields":{"slug":"/posts/blog/javascript/2018-06-26-자바스크립트-객체-정의/"}}}}}