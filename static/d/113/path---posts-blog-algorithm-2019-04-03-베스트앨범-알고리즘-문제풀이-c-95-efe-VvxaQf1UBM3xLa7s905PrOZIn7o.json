{"data":{"markdownRemark":{"id":"bd5ed0c7-4c88-55d1-bd84-c9559aaf3d3b","frontmatter":{"title":"베스트앨범 알고리즘 문제풀이(통과못함) - 프로그래머스"},"html":"<h2 id=\"베스트-앨범-문제\"><a href=\"#%EB%B2%A0%EC%8A%A4%ED%8A%B8-%EC%95%A8%EB%B2%94-%EB%AC%B8%EC%A0%9C\" aria-label=\"베스트 앨범 문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베스트 앨범 문제</h2>\n<h3 id=\"문제-설명\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h3>\n<p>스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.</p>\n<ol>\n<li>속한 노래가 많이 재생된 장르를 먼저 수록합니다.</li>\n<li>장르 내에서 많이 재생된 노래를 먼저 수록합니다.</li>\n<li>장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.</li>\n</ol>\n<p>노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.</p>\n<h3 id=\"제한-사항\"><a href=\"#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\" aria-label=\"제한 사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한 사항</h3>\n<ul>\n<li>genres[i]는 고유번호가 i인 노래의 장르입니다.</li>\n<li>plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.</li>\n<li>genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.</li>\n<li>장르 종류는 100개 미만입니다.</li>\n<li>장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.</li>\n<li>모든 장르는 재생된 횟수가 다릅니다.</li>\n</ul>\n<h2 id=\"문제-해결-단계\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%8B%A8%EA%B3%84\" aria-label=\"문제 해결 단계 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결 단계</h2>\n<h3 id=\"첫번째-문제-풀이-방법-생각하기\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EB%B0%A9%EB%B2%95-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"첫번째 문제 풀이 방법 생각하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 문제 풀이 방법 생각하기.</h3>\n<ol>\n<li>인덱스는 노래의 고유번호(id), 이에 따라 인덱스로 장르, 재생횟수를 꺼내옴.</li>\n<li>장르별로 총 재생횟수를 구하고 이에 대한 정렬이 필요해보임.(해쉬맵 이용)</li>\n<li>장르별로 노래들을 grouping하고 각 재생횟수에 대한 정렬이 필요해보임.</li>\n<li>총 재생횟수로 정렬한 데이터로 재생횟수 많은 순서대로 2개를 추출.</li>\n<li>추출된 2개에 해당하는 grouping된 데이터에 장르로 접근, 재생횟수 많은 순서대로 2개 추출.</li>\n</ol>\n<h4 id=\"인덱스는-노래의-고유번호id-이에-따라-인덱스로-장르-재생횟수를-꺼내옴-1\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EB%8A%94-%EB%85%B8%EB%9E%98%EC%9D%98-%EA%B3%A0%EC%9C%A0%EB%B2%88%ED%98%B8id-%EC%9D%B4%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EB%A1%9C-%EC%9E%A5%EB%A5%B4-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98%EB%A5%BC-%EA%BA%BC%EB%82%B4%EC%98%B4-1\" aria-label=\"인덱스는 노래의 고유번호id 이에 따라 인덱스로 장르 재생횟수를 꺼내옴 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스는 노래의 고유번호(id), 이에 따라 인덱스로 장르, 재생횟수를 꺼내옴. (1)</h4>\n<ul>\n<li>해쉬맵으로 각 값을 가지는 것을 정의해야 될 것 같다는 생각을 함.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 노래 데이터 (1)</span>\nHashMap <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> index<span class=\"token punctuation\">,</span>\n    genre<span class=\"token operator\">:</span> genres<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    play<span class=\"token operator\">:</span> plays<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>3번째에서 장르별로 노래들을 grouping한다고 해서 굳이 genre키를 넣을 필요 없어보임.</li>\n<li>genre별로 그룹핑하려면 자료구조가 다음과 같이 되야될 것 같은데..</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 장르별 그룹핑</span>\nHashMap <span class=\"token punctuation\">{</span>\n    classic<span class=\"token operator\">:</span> List&lt;HashMap><span class=\"token punctuation\">,</span>\n    pop<span class=\"token operator\">:</span> List&lt;HashMap><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 노래 데이터 (2)</span>\nHashMap <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> index<span class=\"token punctuation\">,</span>\n-   genre<span class=\"token operator\">:</span> genres<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    play<span class=\"token operator\">:</span> plays<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>해쉬맵 안에 리스트, 리스트 요소들은 해쉬맵.. 복잡, 정렬을 할때 힘들 것으로 판단된다..</li>\n<li>\n<p>노래 데이터를 해쉬맵으로 하지 않고, 데이터 클래스를 만드는 것이 보기 좋을 것 같다.</p>\n<ul>\n<li>클래스를 만들 때 Comparable을 구현해 나중에 정렬할때도 생각.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Music</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> play<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Music</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">==</span> o<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>play <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"장르별로-총-재생횟수를-구하고-이에-대한-정렬이-필요해보임해쉬맵-이용-2\"><a href=\"#%EC%9E%A5%EB%A5%B4%EB%B3%84%EB%A1%9C-%EC%B4%9D-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98%EB%A5%BC-%EA%B5%AC%ED%95%98%EA%B3%A0-%EC%9D%B4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A0%AC%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%B4%EB%B3%B4%EC%9E%84%ED%95%B4%EC%89%AC%EB%A7%B5-%EC%9D%B4%EC%9A%A9-2\" aria-label=\"장르별로 총 재생횟수를 구하고 이에 대한 정렬이 필요해보임해쉬맵 이용 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장르별로 총 재생횟수를 구하고 이에 대한 정렬이 필요해보임.(해쉬맵 이용) (2)</h4>\n<ol>\n<li>장르별로 총 재생횟수를 구하기.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">solution3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> genres<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> countMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> genres<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        countMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>genres<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> countMap<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>genres<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> plays<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>장르를 key, 총 재생횟수를 value로 지정</p>\n</li>\n<li>\n<p>장르와 재생횟수를 for문으로 돌며 총 재생횟수를 누적시킨다.</p>\n</li>\n<li>\n<p>맵에 장르가 존재하면 get후 재생횟수 누적, 없을 경우 0으로 놓고 재생횟수 누적.</p>\n</li>\n<li>\n<p>재생횟수에 따라 내림차순으로 정렬한 리스트를 만들어야 </p>\n</li>\n<li>\n<p>맵은 순서가 없어 정렬이 가능하지 않음.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">solution3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> genres<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> countMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> genreToSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>countMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    genreToSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> countMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> countMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>장르, 재생횟수로 만든 해쉬맵으로 장르(key)만 들어있는 리스트를 만든다.</li>\n<li>리스트를 정렬하는데, Comparator를 람다식으로 정의.</li>\n</ul>\n<h4 id=\"장르별로-노래들을-grouping하고-각-재생횟수에-대한-정렬이-필요해보임-3\"><a href=\"#%EC%9E%A5%EB%A5%B4%EB%B3%84%EB%A1%9C-%EB%85%B8%EB%9E%98%EB%93%A4%EC%9D%84-grouping%ED%95%98%EA%B3%A0-%EA%B0%81-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A0%AC%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%B4%EB%B3%B4%EC%9E%84-3\" aria-label=\"장르별로 노래들을 grouping하고 각 재생횟수에 대한 정렬이 필요해보임 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장르별로 노래들을 grouping하고 각 재생횟수에 대한 정렬이 필요해보임. (3)</h4>\n<ol>\n<li>장르를 key, 노래 리스트를 value로 하는 해쉬맵으로 데이터셋</li>\n<li>value인 노래 리스트는 나중에 가장 많은 재생횟수 2개를 가져올 것이기 때문에 정렬보단 우선순위 큐를 한번 이용해보기로 함.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">solution3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> genres<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupby <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>상위 인터페이스인 Queue로 타입을 정하고 나중에 인스턴스를 PriorityQueue로 넣을 것임.</p>\n</li>\n<li>\n<p>loop를 돌리며 데이터 세팅</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">solution3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> genres<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupby <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// groupBy</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> genres<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> genre <span class=\"token operator\">=</span> genres<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> play <span class=\"token operator\">=</span> plays<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span></span> orDefault<span class=\"token punctuation\">;</span>\n        orDefault <span class=\"token operator\">=</span> groupby<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        orDefault<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Music</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> play<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        groupby<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">,</span> orDefault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// sysout groupby</span>\n    <span class=\"token comment\">// ===</span>\n    <span class=\"token comment\">// {classic=[Music{id=1, play=600}, Music{id=0, play=500}, Music{id=2, play=150}]}</span>\n    <span class=\"token comment\">// {pop=[Music{id=4, play=2500}, Music{id=1, play=600}], classic=[Music{id=3, play=800}, Music{id=2, play=150}, Music{id=0, play=500}]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>해당 장르가 들어있지 않으면 우선순위큐 인스턴스 생성, 들어있으면 해당 큐에 데이터 offer</li>\n</ul>\n<h4 id=\"총-재생횟수로-정렬한-데이터로-재생횟수-많은-순서대로-2개를-추출-4\"><a href=\"#%EC%B4%9D-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98%EB%A1%9C-%EC%A0%95%EB%A0%AC%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98-%EB%A7%8E%EC%9D%80-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-2%EA%B0%9C%EB%A5%BC-%EC%B6%94%EC%B6%9C-4\" aria-label=\"총 재생횟수로 정렬한 데이터로 재생횟수 많은 순서대로 2개를 추출 4 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>총 재생횟수로 정렬한 데이터로 재생횟수 많은 순서대로 2개를 추출. (4)</h4>\n<ul>\n<li>sortToGenre 리스트에 총 재생횟수에 따른 정렬된 장르 리스트가 있을 것임. 여기서 2개를 추출하면 끝.</li>\n<li>이때 추출된 장르를 가지고 결과값에 바로 넣어주도록 함. - (5)에서 더 자세하게 코딩</li>\n</ul>\n<blockquote>\n<p>제한사항에서 장르가 1개일 경우도 있다.\n확정적으로 2개를 뽑게 된다면 장르가 1개 일때 에러가 발생할 것이므로,\niterator와 카운트 변수를 이용, 값이 존재하거나 뽑은 횟수를 조건으로 데이터 셋을 만든다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">solution3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> genres<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> tempAnswer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 리턴할 값을 넣어줄 데이터 셋</span>\n    <span class=\"token keyword\">int</span> genreCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> genreIt <span class=\"token operator\">=</span> genreToSort<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 리스트에 다음 값이 없거나, 2개를 뽑은 상태면 while을 종료</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>genreIt<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> genreCount <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> genre <span class=\"token operator\">=</span> genreIt<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// </span>\n        <span class=\"token comment\">// ...다음 코드 (5)</span>\n        genreCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"추출된-2개에-해당하는-grouping된-데이터에-장르로-접근-재생횟수-많은-순서대로-2개-추출\"><a href=\"#%EC%B6%94%EC%B6%9C%EB%90%9C-2%EA%B0%9C%EC%97%90-%ED%95%B4%EB%8B%B9%ED%95%98%EB%8A%94-grouping%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%9E%A5%EB%A5%B4%EB%A1%9C-%EC%A0%91%EA%B7%BC-%EC%9E%AC%EC%83%9D%ED%9A%9F%EC%88%98-%EB%A7%8E%EC%9D%80-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-2%EA%B0%9C-%EC%B6%94%EC%B6%9C\" aria-label=\"추출된 2개에 해당하는 grouping된 데이터에 장르로 접근 재생횟수 많은 순서대로 2개 추출 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추출된 2개에 해당하는 grouping된 데이터에 장르로 접근, 재생횟수 많은 순서대로 2개 추출.</h4>\n<ul>\n<li>위의 (4)에서 장르를 추출함과 동시에 해당 장르에 속한 노래들을 재생횟수 많은 순서대로 2개 추출해 데이터셋에 저장</li>\n</ul>\n<h5 id=\"우선순위-큐에서의-데이터-추출할-때\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90%EC%97%90%EC%84%9C%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EC%B6%9C%ED%95%A0-%EB%95%8C\" aria-label=\"우선순위 큐에서의 데이터 추출할 때 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 큐에서의 데이터 추출할 때</h5>\n<p>다음 토픽으로 얘기할 것은 무엇이냐면 queue를 iterator로 바꾸고 데이터를 추출하면 우선순위가 안나온다는 것을 정리하기 위해서! 어떻게 보면 당연한 것인데 이걸 간과하고 iterator를 가지고 총 재생횟수 높은 2개를 .hasNext()로 뽑으려니 첫번째는 맞게 나왔지만 2번째는 정렬되지 않게 나왔다. ㅠㅠ 까먹지 말자구</p>\n<details class=\"custom-block\"><summary class=\"custom-block-heading\">코드</summary><div class=\"custom-block-body\"><p>content</p></div></details>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span></span> musicQ <span class=\"token operator\">=</span> groupby<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> musicQ<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... -> 첫번째 값은 맞게 나올지 몰라도 두번째는 정렬되어 나오지 않는다.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 이렇게 고치자!</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Music</span><span class=\"token punctuation\">></span></span> musicQ <span class=\"token operator\">=</span> groupby<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>musicQ<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* &amp;&amp; ... */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Music</span> music <span class=\"token operator\">=</span> musicQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .poll()로 값을 추출</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","headings":[{"value":"베스트 앨범 문제","depth":2},{"value":"문제 설명","depth":3},{"value":"제한 사항","depth":3},{"value":"문제 해결 단계","depth":2},{"value":"첫번째 문제 풀이 방법 생각하기.","depth":3},{"value":"인덱스는 노래의 고유번호(id), 이에 따라 인덱스로 장르, 재생횟수를 꺼내옴. (1)","depth":4},{"value":"장르별로 총 재생횟수를 구하고 이에 대한 정렬이 필요해보임.(해쉬맵 이용) (2)","depth":4},{"value":"장르별로 노래들을 grouping하고 각 재생횟수에 대한 정렬이 필요해보임. (3)","depth":4},{"value":"총 재생횟수로 정렬한 데이터로 재생횟수 많은 순서대로 2개를 추출. (4)","depth":4},{"value":"추출된 2개에 해당하는 grouping된 데이터에 장르로 접근, 재생횟수 많은 순서대로 2개 추출.","depth":4},{"value":"우선순위 큐에서의 데이터 추출할 때","depth":5}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/algorithm/2019-04-03-베스트앨범-알고리즘-문제풀이/","previous":null}}