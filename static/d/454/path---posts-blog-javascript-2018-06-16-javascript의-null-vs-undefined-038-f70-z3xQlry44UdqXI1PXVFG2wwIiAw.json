{"data":{"markdownRemark":{"frontmatter":{"title":""},"html":"<h1>null과 undefined의 차이</h1>\n<h2>개요</h2>\n<p>javascript에 관한 기술면접 중 </p>\n<p>\"null과 undefined의 차이를 아시면 설명 해주실 수 있을까요?\"</p>\n<p>라는 질문을 받았었다.</p>\n<p>수료 후 javascript만을 공부했던 나인데 전~혀 생각 안해본 개념이라 답변을 못했었다.. ㅠㅠ</p>\n<p>\"근데 진짜 무슨 차이지? 다른 언어들과는 다르게 왜 그 두 개가 분리되어 있는 거지?\" 라는 생각을 하였고 한번 찾아보기로 했다.</p>\n<p>stackoverflow와 내 나름대로 여러 문법들을 이용해 차이점을 찾아보았다.</p>\n<hr>\n<h2>1. number 계산</h2>\n<p>두 개의 파라미터를 받아 더한 값을 리턴하는 간단한 함수를 만들었다.</p>\n<pre><code>function add(a, b) {\n    return a + b;\n}\n</code></pre>\n<p>파라미터 a에 undefined 또는 null값을 넣어 리턴받은 값을 출력했더니 다른 값이 나왔다.</p>\n<ul>\n<li>undefined를 넣었을 때</li>\n</ul>\n<pre><code>var undefinedResult = add(undefined, 10);\nconsole.log(undefinedResult);\n// -> NaN\n</code></pre>\n<ul>\n<li>null을 넣었을 때</li>\n</ul>\n<pre><code>var nullResult = add(null, 10);\nconsole.log(nullResult);\n// -> 10\n</code></pre>\n<p>결과</p>\n<ul>\n<li>undefined는 연산을 할 수 없다.</li>\n<li>null연산에 이용시 <em>0</em> 으로 대체하여 연산된다.</li>\n</ul>\n<hr>\n<h2>2. 변수 정의 및 typeof</h2>\n<p>기본적으로 변수 정의 후 값을 넣지 않을 경우 해당 변수는 undefined 상태.</p>\n<ul>\n<li>undefined</li>\n</ul>\n<pre><code>var testVar;\nconsole.log(testVar);\n// -> undefined\nconsole.log(typeof testVar);\n// -> undefined\n</code></pre>\n<ul>\n<li>null</li>\n</ul>\n<pre><code>var testVar2 = null;\nconsole.log(testVar2);\n// -> null\nconsole.log(typeof testVar2);\n// -> object\n</code></pre>\n<p>typeof 연산으로 타입 체크시 </p>\n<ul>\n<li>undefined는 \"undefined\"</li>\n<li>null은 \"object\"</li>\n</ul>\n<p>해당 개념의 연장선으로..</p>\n<hr>\n<h2>3. '=='와 '==='</h2>\n<ul>\n<li>'=='연산은 타입에 상관없이 값만을 비교 (느슨한 비교)</li>\n<li>'==='연산은 타입과 값을 비교 (엄격한 비교)</li>\n</ul>\n<p>그럼 한번 null과 undefined 사이를 비교해보자</p>\n<pre><code>var testVar;    // undefined\nvar testVar2 = null;\n\nconsole.log(testVar == testVar2);\n// -> true\nconsole.log(testVar === testVar2);\n// -> false\n</code></pre>\n<ul>\n<li>'==', 값을 비교했을 때는 true</li>\n<li>'===', 값과 타입을 비교했을 때는 false</li>\n</ul>\n<hr>\n<h2>4. 조건문 안에서의 동작</h2>\n<p>바로 코드로 확인해보겠다.</p>\n<pre><code>if(undefined){\n    // not working\n} else {\n    // working\n}\n\nif(null) {\n    // not working\n} else {\n    // working\n}\n</code></pre>\n<p>null과 undefined 둘 다 거짓(false)로 변환되는 공통점을 가지고 있다.</p>\n<hr>\n<h2>결론</h2>\n<p>이것말고도 더 많은 차이가 있는지 모르겠지만</p>\n<p>찾아보면서 느낀 점은</p>\n<p>개발을 하면서 신경을 안써도 상관없을 것 같다.</p>\n<p>끝</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/javascript/2018-06-16-Javascript의-null-vs-undefined/","previous":{"node":{"id":"457c1037-1eae-5696-8ec9-2955e29b8e57","frontmatter":{"title":"Express 웹서버 만들기 (1)","category":"node-express","date":"2018-06-09"},"fields":{"slug":"/posts/blog/node-express/2018-06-09-ExpressJS-1/"}}},"next":{"node":{"id":"cff46be5-bb4c-57c0-b005-9d96b68ec3ee","frontmatter":{"title":"","category":null,"date":"2018-06-26 07:49:00 +0300"},"fields":{"slug":"/posts/blog/javascript/2018-07-01-Javascript-Prototype/"}}}}}