{"data":{"markdownRemark":{"frontmatter":{"title":"Spring DI를 위한 Annotation"},"html":"<h1>Spring 의존관계 자동 설정</h1>\n<h2>Spring Bean 등록</h2>\n<ul>\n<li>스프링 컨테이너는 base-package의 클래스를 검색해 자동으로 Bean을 등록</li>\n<li>@Component, @Repository, @Service, @Controller, @RestController</li>\n<li>해당 Annotation을 이용, 클래스를 Bean으로 등록할 수 있다.</li>\n<li>XML의 Context파일은 component-scan에 해당 어노테이션을 쓰는 클래스들의 패키지를 등록해야함.</li>\n</ul>\n<h2>등록된 Bean을 이용한 의존관계 자동 설정</h2>\n<ul>\n<li>Spring은 의존하는 빈 객체의 타입이나 이름을 이용하여 의존 객체를 자동으로 설정 할 수 있는 기능을 제공한다.</li>\n<li>\n<p>자동설정에는 다음 네 가지 Annotation이 존재한다.</p>\n<blockquote>\n<p>@Autowired, @Inject, @Resource, @Qualifier</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@Autowired</th>\n<th align=\"center\">@Inject</th>\n<th align=\"center\">@Resource</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">범용</td>\n<td align=\"center\">Spring</td>\n<td align=\"center\">Java</td>\n<td align=\"center\">Java</td>\n</tr>\n<tr>\n<td align=\"center\">방식</td>\n<td align=\"center\">타입에 맞춰 연결</td>\n<td align=\"center\">타입에 맞춰 연결</td>\n<td align=\"center\">이름에 맞춰 연결</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>@Inject, @Resource는 기존 Java의 Annotation</p>\n</li>\n<li>\n<p>@Autowired는 Spring에서 지원하는 Annotation</p>\n</li>\n<li>\n<p>보통은 @Autowired와 @Inject은 거의 같다고 봐도 무방할 듯</p>\n</li>\n<li>\n<p>@Resource는 타입이 아닌 이름에 맞춰 연결하는 것이 다름</p>\n<h3>타입에 맞춰 연결 vs 이름에 맞춰 연결</h3>\n<p>다음과 같은 예시의 Context가 설정되 있다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// root-context.xml\n&lt;bean id=&quot;dataSourceSpied&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;\n\t&lt;property name=&quot;driverClassName&quot; value=&quot;oracle.jdbc.driver.OracleDriver&quot;&gt;&lt;/property&gt;\n\t&lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521/XE&quot;&gt;&lt;/property&gt;\n\t&lt;property name=&quot;username&quot; value=&quot;ora_user&quot;&gt;&lt;/property&gt;\n\t&lt;property name=&quot;password&quot; value=&quot;jeong&quot;&gt;&lt;/property&gt;\n&lt;/bean&gt;\n\n  &lt;bean id=&quot;dataSource&quot; class=&quot;net.sf.log4jdbc.Log4jdbcProxyDataSource&quot;&gt;\n\t&lt;constructor-arg ref=&quot;dataSourceSpied&quot; /&gt;\n\t&lt;property name=&quot;logFormatter&quot;&gt;\n\t\t&lt;bean class=&quot;net.sf.log4jdbc.tools.Log4JdbcCustomFormatter&quot;&gt;\n\t\t\t&lt;property name=&quot;loggingType&quot; value=&quot;MULTI_LINE&quot; /&gt;\n\t\t\t&lt;property name=&quot;sqlPrefix&quot; value=&quot;SQL         :  &quot; /&gt;\n\t\t&lt;/bean&gt;\n\t&lt;/property&gt;\n&lt;/bean&gt;</code></pre></div>\n<h3>해당 Bean들은 DataSource라는 인터페이스를 구현한 객체이다.</h3>\n</li>\n<li>\n<p>dataSourceSpied는 DB와 연결하는 객체</p>\n</li>\n<li>\n<p>dataSource는 DB와 데이터를 주고받을 때 로그를 찍게 해주는 객체</p>\n</li>\n</ul>\n<h3>둘다 DataSource타입을 구현한 객체라면 만약에...</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 임의의.class\npublic class 임의의 {\n      @Autowired  // @Inject도 가능\n      private DataSource ds;\n}</code></pre></div>\n<p>위와 같이 코드를 했을 경우 에러가 발생한다.</p>\n<h3>에러의 핵심 내용을 보자면</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No qualifying bean of type &#39;javax.sql.DataSource&#39; available: expected single matching bean but found 2: dataSource,dataSourceSpied</code></pre></div>\n<p>대충 해석해보면 </p>\n<blockquote>\n<p>1개의 Bean을 기대했는데 2개의 Bean을 발견했다. 그 두개는 dataSource, dataSourceSpied.</p>\n</blockquote>\n<p>DataSource를 구현한 객체가 2개이므로 Bean도 2개를 발견하게 되는 것이다.</p>\n<p>타입에 맞춰 연결을 하게 되어 에러가 발생.</p>\n<p>여기서 @Resource를 사용하여 타입이 아닌 이름으로 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 임의의.class\npublic class 임의의 {\n      @Resource(name= &quot;dataSource&quot;)\n      private DataSource ds;\n      // 또는\n      @Resource\n      private DataSource dataSource;\n}</code></pre></div>\n<ul>\n<li>name값을 넣어 맞는 bean의 id를 찾아서 설정하거나,</li>\n<li>변수명과 같은 bean의 id를 찾아 설정.</li>\n</ul>\n<h1>해결 못한 것들..?</h1>\n<h2>@Qualifier</h2>\n<ul>\n<li>\n<p>@Autowired, @Inject의 경우에도 @Qualifier를 이용하면 타입 이외에도 다른 연결이 가능하고 하는데...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bird &lt;- Interface\n// Chicken, Penguin &lt;- Bird를 구현한 class\n@Autowired\n@Qualifier(&quot;chicken&quot;)\nprivate Bird penguin;</code></pre></div>\n<p>위와 같이 쓰면 이름에 상관없이 Chicken 타입으로 연결되는 것을 알 수 있습니다.\n이렇게 하면 된다는 데...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 임의의.class\npublic class 임의의 {\n  @Autowired\n  @Qualifier(&quot;log4jdbcProxyDataSource&quot;) // 또는 @Qualifier(&quot;net.sf.log4jdbc.Log4jdbcProxyDataSource&quot;)\n  private DataSource ds;\n}</code></pre></div>\n<p>파라미터 맨앞이 소문자가 맞는건지도 모르겠고\n소문자면 라이브러리에서 가져오는 건 타입명만 써야되는 건지\n경우의 수가 4개 나오는데 다 에러가 뜸...</p>\n</li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/spring/2018-06-08-Spring-DI-Annotation/","next":null}}