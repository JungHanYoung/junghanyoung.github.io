{"data":{"markdownRemark":{"id":"39354791-87e9-5161-97d2-82e4b823a62a","frontmatter":{"title":"자바스크립트에서 객체를 만드는 법 1"},"html":"<h2 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>클래스나 상속과 같은 객체지향이 없는 자바스크립트는 함수, 즉 function으로만 코딩할 수 있다고 알고있다.</p>\n<p>자바스크립트로 객체를 정의하는 방법.</p>\n<h2 id=\"코드\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<h3 id=\"java-코드\"><a href=\"#java-%EC%BD%94%EB%93%9C\" aria-label=\"java 코드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 자바 코드\nclass Obj1 {\n    public int id;\n    public String name;\n    public Obj1(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n    public void print() {\n        System.out.println(&quot;id: &quot; + this.id + &quot;, name: &quot; + this.name)\n    }\n}</code></pre></div>\n<br/>\n<h3 id=\"javascript-1\"><a href=\"#javascript-1\" aria-label=\"javascript 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 자바스크립트 코드\nvar Obj1 = function(id, name) {\n    this.id = id;\n    this.name = name;\n    // 내부 메소드 정의\n    this.print = function() {\n        console.log(&#39;id: &#39; + this.id + &#39;, name: &#39; + this.name);\n    }\n}</code></pre></div>\n<ul>\n<li>function와 this를 이용.</li>\n<li>변수는 변수로 정의, 메소드는 함수로 정의</li>\n<li>내부 메소드 정의 </li>\n</ul>\n<p>메소드를 내부에 정의할 경우 새로운 객체를 생성할때마다 print함수가 매번 재생성 된다고 한다. 함수를 바꾸는 경우가 있다면 필요하겠지만 그럴 일은 거의 없으므로...</p>\n<h3 id=\"javascript-2\"><a href=\"#javascript-2\" aria-label=\"javascript 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 프로토타입 이용한 메소드 정의\nvar Obj1 = function(id, name) {\n    this.id = id;\n    this.name = name;\n}\n\nObj1.prototype.print = function() {\n    console.log(&#39;id: &#39; + this.id + &#39;, name: &#39; + this.name);\n}</code></pre></div>\n<ul>\n<li>프로토타입에 정의할 경우 매번 재생성하지 않고 함수는 프로토타입을 통해서만 호출되는 것 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 객체 생성\nvar o1 = new Obj1(1, &#39;hello&#39;);\n// 내부 메소드 정의\nObj1 { id: 1, name: &#39;hello&#39;, print: [Function] }\n// 프로토타입 메소드 정의\nObj1 { id: 1, name: &#39;hello&#39; }</code></pre></div>\n<p>자바스크립트의 객체는 그저 함수로 객체를 흉내내는 것이라 볼 수 있다.</p>\n<h2 id=\"es2015-class-정의\"><a href=\"#es2015-class-%EC%A0%95%EC%9D%98\" aria-label=\"es2015 class 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2015 class 정의</h2>\n<p>ES2015(ES6)부터 나온 클래스 정의 문법</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// javascript ES6\nclass Obj {\n    constructor(id, name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    print() {\n        console.log((&#39;id: &#39; + this.id + &#39;, name: &#39; + this.name);\n    }\n}</code></pre></div>","headings":[{"value":"개요","depth":2},{"value":"코드","depth":2},{"value":"Java 코드","depth":3},{"value":"Javascript 1","depth":3},{"value":"Javascript 2","depth":3},{"value":"ES2015 class 정의","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/javascript/2018-06-26-자바스크립트-객체-정의/","previous":{"node":{"id":"8160b41e-aad8-509f-bfaf-902871107429","frontmatter":{"title":"JWT를 이용한 token 인증 구현해보기.","category":"node-express","date":"2018-06-17 07:49:00 +0300"},"fields":{"slug":"/posts/blog/node-express/2018-06-17-jwt를-이용한-token인증/"}}},"next":{"node":{"id":"b74a7315-b615-501d-94c8-da8f4c58495e","frontmatter":{"title":"블록체인 개념 정립을 위한 자바스크립트 코딩","category":"javascript","date":"2018-06-26"},"fields":{"slug":"/posts/blog/javascript/2018-06-29-Block-Chain-간단-구현/"}}}}}