{"data":{"markdownRemark":{"frontmatter":{"title":"JDBC -> DBCP -> MyBatis"},"html":"<h2 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>MyBatis를 이용하는 이유.. 쓰다보니 편리한건 알겠는데 왜 편리한건지 이유에 대한 정리가 안되었다.</p>\n<p>그냥 편하게 쓰면 되겠징 룰루</p>\n<p>이렇게 생각하다가 막상 이 질문을 받았을 때 대답을 할 수 없었다. 편리하다고만 할 수는 없지 않은가.. 그니까 이게 왜 편리하냐궁ㅋ </p>\n<p>확실히 하고 싶어서 여러 포스트들을 찾아보고 정리하려 한다.</p>\n<hr>\n<br/>\n<h2 id=\"jdbc\"><a href=\"#jdbc\" aria-label=\"jdbc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC</h2>\n<blockquote>\n<p>Java DataBase Connectivity의 약자로 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다.</p>\n</blockquote>\n<p>데이터베이스 연동관련 자바를 배울 때 처음으로 접하는 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PrepareStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// MySQL JDBC 드라이버</span>\n\n    <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>USERNAME<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>PASSWORD<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into member1 values(?,?,?,?)\"</span><span class=\"token punctuation\">;</span>\n\n    pstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"passwd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"김철수\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timestamp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pstmt <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span> pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> sqle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conn <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> sqle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 JDBC코드의 문제점이라고 할 수 있는 것은</p>\n<h4 id=\"하나의-sql문을-실행할-때마다-커넥션을-열고-닫고를-해야한다\"><a href=\"#%ED%95%98%EB%82%98%EC%9D%98-sql%EB%AC%B8%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%BB%A4%EB%84%A5%EC%85%98%EC%9D%84-%EC%97%B4%EA%B3%A0-%EB%8B%AB%EA%B3%A0%EB%A5%BC-%ED%95%B4%EC%95%BC%ED%95%9C%EB%8B%A4\" aria-label=\"하나의 sql문을 실행할 때마다 커넥션을 열고 닫고를 해야한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하나의 SQL문을 실행할 때마다 커넥션을 열고 닫고를 해야한다.</h4>\n<p>이게 무슨 말이냐..</p>\n<p>서버 통신으로 10개의 SQL을 실행해야한다고 가정하면</p>\n<p>JDBC코드의 경우 커넥션 열고 닫기를 10번을 반복해야한다.</p>\n<p>웹 서버에서 물리적으로 DB서버에 최초로 연결되어 Connection 객체를 생성하는 부분은 서버의 자원을 많이 소모한다고 한다.</p>\n<p>SQL문이 많이 오가는 WAS는 이러한 이유로 JDBC는 대부분 쓰이지 않는다고 한다.</p>\n<p>그래서 DB연결의 부담을 줄이기 위해 나온 방법이 DBCP를 이용한 것이다.</p>\n<h2 id=\"dbcp\"><a href=\"#dbcp\" aria-label=\"dbcp permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DBCP</h2>\n<p>Database Connection Pool.</p>\n<p>해당 구현체의 역할은 다음과 같다</p>\n<ol>\n<li>WAS 실행 시 Connection객체를 미리 만들고 Pool 공간에 저장해둔다.</li>\n<li>HTTP 요청시 Pool의 Connection객체를 가져다 쓰고 반환한다.</li>\n</ol>\n<p>미리 만들어진 Connection을 쓰고 반환만 하기 때문에 DB연결 및 해제의 과정이 없어 Connection객체를 생성하는 비용을 줄일 수 있게 된다.</p>\n<h2 id=\"mybatis\"><a href=\"#mybatis\" aria-label=\"mybatis permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MyBatis</h2>\n<p>자바에서의 퍼시스턴스 프레임워크 중 하나.</p>\n<p>DBCP을 이용한 프레임워크라 볼 수 있고,</p>\n<p>JDBC보다 생산성이 높고 유지보수 측면에서 장점이 있다.</p>\n<p>내가 느낀 장점에 대해 얘기하자면...</p>\n<h3 id=\"sql명령어를-자바-코드에서-분리하여-xml파일에-따로-관리\"><a href=\"#sql%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%9E%90%EB%B0%94-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%B6%84%EB%A6%AC%ED%95%98%EC%97%AC-xml%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%94%B0%EB%A1%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"sql명령어를 자바 코드에서 분리하여 xml파일에 따로 관리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL명령어를 자바 코드에서 분리하여 XML파일에 따로 관리.</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">// root-context.xml\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sqlSessionFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.mybatis.spring.SqlSessionFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>configLocation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;MyBatis 설정파일 경로><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mapperLocation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;MyBatis Mapper파일 경로><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n// mapper.xml\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>getTime<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    SELECT SYSDATE FROM dual\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>SQL문이 자바코드와 뒤엉키는 것을 방지하는 것 같다.</li>\n<li>확실히 SQL문 보기가 편하다.</li>\n<li>분리되어 있기 때문에 관리하기가 좀 더 용이하였다.</li>\n</ul>\n<br/>\n<h3 id=\"resultset-결과를-객체로-자동-매핑시켜주어-복잡한-매핑코드를-넣지-않아도-되는-것\"><a href=\"#resultset-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EC%9E%90%EB%8F%99-%EB%A7%A4%ED%95%91%EC%8B%9C%EC%BC%9C%EC%A3%BC%EC%96%B4-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A7%A4%ED%95%91%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%84%A3%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%98%EB%8A%94-%EA%B2%83\" aria-label=\"resultset 결과를 객체로 자동 매핑시켜주어 복잡한 매핑코드를 넣지 않아도 되는 것 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ResultSet 결과를 객체로 자동 매핑시켜주어 복잡한 매핑코드를 넣지 않아도 되는 것.</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.onezero.domain.BoardVO<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    SELECT * FROM board\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>resultType이나 parameterType들을 기본 자료형, Collection, 특정 Value Object등으로 명시할 시 해당 타입으로 자동 매핑을 시켜준다. (객체일시 get, set메소드 필요)</li>\n<li>이것만 생각해도 소스코드가 확 줄어드는 것을 느낌.</li>\n</ul>\n<br/>\n<h3 id=\"sql를-동적으로-구성하는-것이-가능하여-중복되는-sql를-최소화-할-수-있다\"><a href=\"#sql%EB%A5%BC-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%98%EC%97%AC-%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-sql%EB%A5%BC-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"sql를 동적으로 구성하는 것이 가능하여 중복되는 sql를 최소화 할 수 있다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL를 동적으로 구성하는 것이 가능하여 중복되는 SQL를 최소화 할 수 있다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">// mapper.xml\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>searchList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.onezero.domain.BoardVO<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    SELECT * FROM board\n     WHERE bno <span class=\"token entity\" title=\"&gt;\">&amp;gt;</span> 0\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        AND title LIKE #{title}\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>SQL안에 if element를 넣음으로써 문자열 검색기능을 선택적으로 실행할 것이다.</p>\n</li>\n<li>\n<p>if, choose(when, otherwise), trim(where, set), foreach등의 element들이 있다.</p>\n</li>\n</ul>","headings":[{"value":"개요","depth":2},{"value":"JDBC","depth":2},{"value":"하나의 SQL문을 실행할 때마다 커넥션을 열고 닫고를 해야한다.","depth":4},{"value":"DBCP","depth":2},{"value":"MyBatis","depth":2},{"value":"SQL명령어를 자바 코드에서 분리하여 XML파일에 따로 관리.","depth":3},{"value":"ResultSet 결과를 객체로 자동 매핑시켜주어 복잡한 매핑코드를 넣지 않아도 되는 것.","depth":3},{"value":"SQL를 동적으로 구성하는 것이 가능하여 중복되는 SQL를 최소화 할 수 있다.","depth":3}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/spring/2018-06-18-JDBC,-DBCP,-그리고-MyBatis/","previous":{"node":{"id":"fb40917b-43ed-5efd-b4c8-0dcf90fb47bc","frontmatter":{"title":"데이터베이스 인덱스는 뭘까..?","category":"database","date":"2018-06-17"},"fields":{"slug":"/posts/blog/database/2018-06-22-데이터베이스-인덱스(Index)/"}}},"next":{"node":{"id":"8160b41e-aad8-509f-bfaf-902871107429","frontmatter":{"title":"JWT를 이용한 token 인증 구현해보기.","category":"node-express","date":"2018-06-17 07:49:00 +0300"},"fields":{"slug":"/posts/blog/node-express/2018-06-17-jwt를-이용한-token인증/"}}}}}