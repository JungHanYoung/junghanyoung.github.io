{"data":{"markdownRemark":{"frontmatter":{"title":"Express에 Sequelize 적용해보기"},"html":"<h1>Express &#x26; Sequelize</h1>\n<h2>모듈 설치</h2>\n<pre><code>// sequelize 설치\n> npm install --save sequelize express\n&#x26; yarn add sequelize express\n\n// DBMS 모듈 하나 선택\n$ npm install --save pg pg-hstore // PostgreSQL\n$ npm install --save mysql2 &#x3C;-- select\n$ npm install --save sqlite3\n$ npm install --save tedious // MSSQL\n</code></pre>\n<h2>프로젝트 구조</h2>\n<pre><code>&#x3C;Project>\n- node_modules\n- models\n - index.js\n - user.js\n - post.js\n- app.js\n- package.json\n</code></pre>\n<h2>Source Code</h2>\n<pre><code>// models/index.js\n\nvar Sequelize = require('sequelize');\nvar path = require('path');\n\n// DB 연결정보\nvar sequelize = new Sequelize(&#x3C;DB_NAME>, '&#x3C;DB_USER>', '&#x3C;DB_PASSWORD>', {\n    // npm install --save mysql2\n    dialect: 'mysql',\n    host: 'localhost'\n});\n\n// ORM\nvar models = {\n    // models/user.js, models/post.js 생성\n    User: sequelize.import(path.join(__dirname, '/user')),\n    Post: sequelize.import(path.join(__dirname, '/post'))\n};\n\n// 테이블 간의 관계\nObject.keys(models).forEach((modelName) => {\n    if ('associate' in models[modelName]) {\n        models[modelName].associate(models);\n    }\n});\n\nmodels.sequelize = sequelize;\nmodels.Sequelize = Sequelize;\n\nmodule.exports = models;\n</code></pre>\n<ul>\n<li>DB 연결정보 작성</li>\n<li>모델 모듈 호출 후 저장</li>\n</ul>\n<pre><code>// models/user.js\n\nmodule.exports = function(sequelize, DataTypes) {\n    const User = sequelize.define('user', {\n        username: {\n            type: DataTypes.STRING,\n            unique: true\n        },\n        password: {\n            type: DataTypes.STRING\n        }\n    });\n\n    User.associate = function(models) {};\n\n    return User;\n};\n</code></pre>\n<ul>\n<li>sequelize.define으로 모델 생성</li>\n<li>외래키가 있을 경우 associate 함수 안에 정의</li>\n</ul>\n<pre><code>module.exports = function(sequelize, DataTypes) {\n    const Post = sequelize.define('post', {\n        title: {\n            type: DataTypes.STRING\n        },\n        content: {\n            type: DataTypes.STRING\n        }\n    });\n\n    Post.associate = function(models) {\n        Post.belongsTo(models.User);\n    };\n\n    return Post;\n};\n</code></pre>\n<ul>\n<li>외래키의 경우 Post.belongsTo 함수</li>\n</ul>\n<pre><code>// app.js\n\nvar models = require('./models');\n...\nmodels.sequelize.sync(function() {\n    app.listen(3000, function() {\n        console.log('Server Started..')\n    });\n})\n</code></pre>\n<ul>\n<li>sync시 데이터베이스가 모듈 내용에 따라 싱크를 맞춤.</li>\n<li>성공시 서버 구동.</li>\n</ul>\n<h2>실행시 테이블 구조 확인</h2>\n<h3>users 테이블</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Field</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Null</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Default</th>\n<th align=\"left\">Extra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">id</td>\n<td align=\"left\">int(11)</td>\n<td align=\"left\">No</td>\n<td align=\"left\">PRI</td>\n<td align=\"left\">NULL</td>\n<td align=\"left\">auto_increment</td>\n</tr>\n<tr>\n<td align=\"left\">username</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">No</td>\n<td align=\"left\">UNI</td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">createdAt</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">No</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">updatedAt</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">No</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<h3>posts 테이블</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Field</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Null</th>\n<th align=\"left\">Key</th>\n<th align=\"left\">Default</th>\n<th align=\"left\">Extra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">id</td>\n<td align=\"left\">int(11)</td>\n<td align=\"left\">No</td>\n<td align=\"left\">PRI</td>\n<td align=\"left\">NULL</td>\n<td align=\"left\">auto_increment</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">content</td>\n<td align=\"left\">varchar(255)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">createdAt</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">No</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">updatedAt</td>\n<td align=\"left\">datetime</td>\n<td align=\"left\">No</td>\n<td align=\"left\"></td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">userId</td>\n<td align=\"left\">int(11)</td>\n<td align=\"left\">YES</td>\n<td align=\"left\">MUL</td>\n<td align=\"left\">NULL</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/blog/node-express/2018-06-09-Express-&-Sequelize/","previous":{"node":{"id":"1625e866-da92-53bc-adc0-98bb8389f452","frontmatter":{"title":"Spring DI를 위한 Annotation","category":"spring","date":"2018-06-08"},"fields":{"slug":"/posts/blog/spring/2018-06-08-Spring-DI-Annotation/"}}},"next":{"node":{"id":"8c08aa1e-e9de-580c-9a39-0412ca9fa553","frontmatter":{"title":"","category":null,"date":"2018-06-09T00:00:00.000Z"},"fields":{"slug":"/posts/blog/node-express/2018-06-09-ExpressJS-2-라우팅-분할/"}}}}}